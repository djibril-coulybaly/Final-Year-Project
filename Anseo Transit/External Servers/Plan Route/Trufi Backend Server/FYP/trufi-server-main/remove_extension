#!/bin/bash

nginxconfig=""
environment=""
# see https://riptutorial.com/bash/example/6886/associative-arrays
declare -A envs
envs[production]="./data/nginx/app.conf"
envs[development]="./dev/app.conf"
declare -A dockercomposes
dockercomposes[production]="docker-compose.yml"
dockercomposes[development]="docker-compose.dev.yml"

for i in ${!envs[@]}; do
	if [ -f "${envs[$i]}" ]; then
		nginxconfig="${envs[$i]}"
		environment="$i"
		echo "EXECUTION IN $i MODE!"
	fi
done

if [ -z "$nginxconfig" ]; then
	echo "Error: neither the development and the production environment are initialized. Please initialize them first using one of the 'init' scripts we provided."
	exit 1
fi

if ! [ -n "$1" ]; then
    echo 'Error: extension name as param is needed (e.g. "tileserver")' >&2
    exit 1
fi

if ! [ -d "extensions/$1" ]; then
	echo "Error: extension '$1' is not a valid one. Valid ones are listed below:" >&2
	for i in `dir ./extensions`; do
		echo "$i" >&2
	done
	exit 1
fi

echo "uninstalling/removing extension '$1'"
echo "  turning off ..."
sudo docker-compose -f ./extensions/$1/docker-compose.yml down

echo "  altering nginx configuration at '$nginxconfig' ..."
newContent=""
remove=""
# taken from https://linuxize.com/post/how-to-read-a-file-line-by-line-in-bash/ and modified
#
# WHAT IT DOES:
# It removes every 'location' block containing 'location /$1'.
# It removes every line between a line with 'location /$1' and a line with '}'
# ---------------------
# WHAT IT DOES (detailed):
# If matching 'location /otp' until a '}' in the following lines and our nginx contains the following

# location /tileserver {
# 	proxy_pass http://tileserver/ ;
# }
# 
# location /otp {
# 	proxy_pass http://opentripplanner/ ;
# }
# 
# location /photon {
# 	proxy_pass http://photon/ ;
# }

# Steps it will perform:
# 1. Searching for a line with string 'location /otp'. If found then see next steps.
# 2. Sets the remove marker to true so the algorithm knows not to include the following lines in the output (it will remove them this way) until a specified condition is met.
# 3. If a line contains '}' it will reset the remove marker and all following lines will be included in the output until step 1 applies or EOF has been reached.

# The output which will be saved is

# location /tileserver {
# 	proxy_pass http://tileserver/ ;
# }
# 
# 
# location /photon {
# 	proxy_pass http://photon/ ;
# }

# ---------------------
# WHERE IT FAILS (by example):
# Imagine the following

# 	location /otp {
# 		location /otp/something {
#			...
#		}
# 	}

# would result into

# 	location /otp {
# 	}

while IFS= read -r line; do
	start=`echo $line | grep -i "location /$1"`
	end=`echo $line | grep -i "}"`
	if [ -z "$remove" ]; then
		# if remove marker hasn't been set
		if ! [ -z "$start" ]; then # beginning of the entry we want to remove found
			remove="true" # set remove marker
			continue
		fi
		if [ -z "$newContent" ]; then
			newContent="$line"
		else
			newContent="$newContent
$line"
		fi
	elif ! [ -z "$end" ]; then # if the line contains a } then
		remove="" # unset remove marker
		continue
	fi
done < $nginxconfig

echo "$newContent" > app.conf
mv ./app.conf $nginxconfig

if [ -f "extensions/$1/docker-compose.yml" ]; then
	echo "  deactivating docker-compose.yml ..."
	mv "./extensions/$1/docker-compose.yml" "./extensions/$1/docker-compose.yml.inactive"
fi

if ! [ -f "extensions/$1/docker-compose.yml.inactive" ]; then
	echo "Error: deactivation of docker-compose.yml from extension '$1' failed" >&2
	exit 1
fi

# If nginx is running then restart it
# Name of "nginx" container is hardcoded here
nginxActive=`sudo docker-compose -f ${dockercomposes[$environment]} ps | grep "nginx"`
if ! [ -z "$nginxActive" ]; then
	echo "  restarting nginx of '${dockercomposes[$environment]}' ..."
	sudo docker-compose -f ${dockercomposes[$environment]} restart nginx
fi

echo "trufi extension uninstalled"

exit 0
