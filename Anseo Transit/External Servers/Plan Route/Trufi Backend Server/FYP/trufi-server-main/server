#!/bin/bash

# Run added extensions (this will be automatically normalized to 'up --detach' before passing to docker-compose)
# ---------------------
# server run

# Stop added extensions
# ---------------------
# server stop

# View running containers
# ---------------------
# server ls

# Restart added extensions
# ---------------------
# server restart

# View log of an extension (this will just redirect to our 'viewlog' script)
# ---------------------
# server log <extension name>

# Shut down added extensions
# ---------------------
# server down

# Pause added extensions
# ---------------------
# server pause

# Unpause added extensions
# ---------------------
# server unpause

# other commands that docker-compose accepts

body=()
projectname=`basename "$PWD"`
action="$1"
customCode=""
customDisplay=""

added_extensions=()
extension_dockercompose="docker-compose.yml"
maincomposefile=""
color="\033[0;33m"
reset="\033[0;m"

unset $1

environment=""
# see https://riptutorial.com/bash/example/6886/associative-arrays
declare -A envs
envs[production]="./data/nginx/app.conf"
envs[development]="./dev/app.conf"
declare -A maincomposefiles
maincomposefiles[production]="docker-compose.yml"
maincomposefiles[development]="docker-compose.dev.yml"

for i in ${!envs[@]}; do
	if [ -f "${envs[$i]}" ]; then
		maincomposefile="${maincomposefiles[$i]}"
		nginxconfig="${envs[$i]}"
		environment="$i"
		echo -e "${color}EXECUTION IN $i MODE!${reset}"
	fi
done

if [ -z "$nginxconfig" ]; then
	echo -e "${color}Error: neither the development and the production environment are initialized. Please initialize them first using one of the 'init' scripts we provided.${reset}"
	exit 1
fi

_donothing() {
	return 0
}

_ls() {
	heading=()
	line=1
	IFS="
"
	result=`sudo docker container ls`
	result=( $result )
	for i in "${result[@]}"; do
		if (( $line > 1 )); then
			belongstoproject=`echo $i | grep "$projectname"`
			if [ -n "$belongstoproject" ]; then
				body+=($i)
			fi
		else
			heading+=($i)
		fi
		line=$(($line+1))
	done
	
	printArrayLineByLine
}

printArrayLineByLine() {
	for i in "${heading[@]}"; do
		echo "$i"
	done

	for i in "${body[@]}"; do
		echo "$i"
	done

}


if [ "$action" = "run" ] || [ "$action" = "up" ]; then
	echo -e "${color}deprefixing command to a valid docker-compose command ...${reset}"
	action="up --detach"
	unset $2
elif [ "$action" = "ls" ]; then
	echo -e "${color}list the containers of each extensions all at once ...${reset}"
	action="ps"
	customCode="_donothing"
	customDisplay="_ls"
elif [ "$action" = "log" ] || [ "$action" = "viewlog" ] ; then
	echo -e "${color}redirecting to 'viewlog' script ...${reset}"
	extension="$2"
	unset $2
	./viewlog $extension $@
	exit 0
fi


function listAddedExtensions() {
	for item in `dir "$1"`;
	do
		if [ -f "$1/$item/$extension_dockercompose" ];
		then
			added_extensions+=( "$item" )
		fi
	done
}

listAddedExtensions "extensions" # the directories in 'extensions' represent the names of the extensions. Only their named will be added to the $added_extensions list

cd extensions
for extension in ${added_extensions[@]}; do
	cd "$extension"
	
	if [ -z "$customCode" ]; then
		echo -e "${color}performing desired action '$action' on extension '$extension' ...${reset}"
		sudo docker-compose -p "$projectname" -f $extension_dockercompose --env-file ../../config.env $action
	else
		eval $customCode $extension_dockercompose $action
	fi
	
	cd ../
done
cd ../

if [ -z "$customCode" ]; then
	echo -e "${color}performing desired action '$action' on $maincomposefile ...${reset}"
	sudo docker-compose -p "$projectname" -f $maincomposefile --env-file ./config.env $action
else
	eval $customCode $maincomposefile $action
fi

if [ -n "$customDisplay" ]; then
	eval $customDisplay
fi

# old command (not working anymore):
# ---------------------
#sudo docker-compose -f $maincomposefile ${composeFiles[@]} --env-file ./config.env $action
